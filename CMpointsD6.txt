




L<y>:=PolynomialRing(Rationals());
Lq:=FieldOfFractions(L);
Kext:=Rationals();

//Belyi maps
psi4T3d6:=(1/4)*(-1/((-6)^2*(y^4)-(-6)*(y^2)));
psi4T3d2:=(1/4)*(-1/((2)^2*(y^4)-(2)*(y^2)));
psi3T2:=2*(1/(4*y^3-3*y+1));

//Linear fractional transformations
LFT1:=function(F);    //0,1,oo --> j_2, j_4,j_6
return (-F+1)/(-27/16);
end function;

LFT2:=function(F);     //0,1,oo --> j_4, j_2, j_6
return (-F)/(27/16);
end function;

LFT3:=function(F);     //0,1,oo --> j_6, j_2, j_4
return (-16/27)*(1/F);
end function;

LFT4:=function(F);     //0,1,oo --> j_6, j_4, j_2
return (F-1)/(-27/16*F);
end function;

LFT5:=function(F);     //0,1,oo --> j_4, j_6, j_2
return (F)/(27/16*(-F+1));
end function;

LFT6:=function(F);     //0,1,oo --> j_2, j_6, j_4
return 1/(27/16*(F-1));
end function;

//CM points
discs_Elkies:=[4,24,84,40,51,19,120,52,132,75,168,43,228,88,123,100,147,312,67,148,372,408,267,232,708,163];
CMpoints_Elkies6:=[1,0,-169/27,2312/25,-1377/1024,3211/1024,5776/3375,6877/15625,13689/15625,152881/138240,-701784/15625,21250987/16000000,66863329/11390625,15545888/20796875,-296900721/16000000,421850521/1771561,-1073152081/3024000000,27008742384/27680640625,77903700667/1024000000,69630712957/377149515625,-455413074649/747377296875,-32408609436736/55962140625,-5766681714488721/1814078464000000,66432278483452232/56413239012828125,71475755554842930369/224337327397603890625,699690239451360705067/684178814003344000000];
CMpoints_BabaGranath6:=[ 16*(t-1)/27 : t in CMpoints_Elkies6 ];

//See if there is a rational point in the preimage. return Elkies' coordinate
for i in [3..#CMpoints_BabaGranath6] do
    j:=CMpoints_BabaGranath6[i];
    C:=OptimizedRepresentation(NumberField(Factorization(Numerator(LFT3(psi3T2)-j))[1,1]));
    //C; Factorization(Discriminant(C));
    K:=QuadraticField(-discs_Elkies[i]);
    <Degree(C), SquarefreeFactorization(discs_Elkies[i]), IsInert(2, Integers(K)), ClassNumber(K)>;
    //1+27/16*t;
    //pb:=[ Degree(P[1]) : P in Factorization(Numerator(LFT3(psi3T2)-t)) ];

        j:=Rationals()!j;
        // The Igusa invariants from Baba-Granath for D=6
        J2:=12*(j+1);
        J4:=6*(j^2+j+1);
        J6:=4*(j^3-2*j^2+1);
        J8:=(J2*J6-J4^2)/4;
        J10:=j^3;
        BGIgusa:=[J2,J4,J6,J8,J10];


         //The Igusa-Clebsch invariants are
        I2:=8*J2;
        I4:=-96*J4+4*J2^2;
        I6:=-(576*J6-8*J2^3+160*J2*J4);
        I10:=4096*J10;
        BGIC:=[I2,I4,I6,I10];

        C2:=HyperellipticCurveFromIgusaClebsch(BGIC); Degree(BaseField(C2));
        //f:=HyperellipticPolynomials(C);
        J:=Jacobian(C2);
        GroupName(TwoTorsionSubgroup(J));

          Rx<x>:=PolynomialRing(Rationals());
          M:=Rationals();
          Mq<q>:=PolynomialRing(M);
          for pol in [x^2-j, x^2+(27*j+16) ] do
              if IsIrreducible(Mq!pol) then
              M<b>:=ext<M | pol >;
              Mq<q>:=PolynomialRing(M);
             end if;
          end for;
          M:=AbsoluteField(M);   //Compositum(AbsoluteField(M),NumberField(y^2+6*j)));
          OM:=Integers(M);




            tors_gcd:=[];
            pd:=[ a : a in PrimesUpTo(100,M) | GCD(a, (&*[ Denominator(b) : b in BGIC])*OM) eq 1*OM ];
            for i in [1..#pd] do
                      p:=pd[i];
                      k,phi:=ResidueClassField(p);
                      if phi(I10) ne k!0 and Characteristic(k) gt 5 then
                          ICmodp:=[ k!phi(M!inv) : inv in BGIC ];
                          Cmodp:=HyperellipticCurveFromIgusaClebsch(ICmodp);
                          Jmodp:=Jacobian(Cmodp);
                          EulerFac:=EulerFactor(Jmodp);
                          Append(~tors_gcd, LCM(Evaluate(EulerFac,1),Evaluate(EulerFac,-1)) );
                      end if;
            end for;
            GCD( tors_gcd );

end for;

[ Discriminant(QuadraticField(-d)) : d in [1,2,3,7,11,19,43,67,163] | IsRamified(2,Integers(QuadraticField(-d))) ];


js_init:=function(n,F,m); //Compute j's after applying LFTn(F) up to height bound m
ht:=ht_bound_size(m);
if n eq 1 then
return Setseq(Set([ Evaluate(LFT1(F), r) : r in ht | Evaluate(Denominator(LFT1(F)), r) ne 0 ])); //I_3 torsion reattempt
elif n eq 2 then
return Setseq(Set([ Evaluate(LFT2(F), r) : r in ht | Evaluate(Denominator(LFT2(F)), r) ne 0  ])); //I_3 torsion reattempt2
elif n eq 3 then
return Setseq(Set([ Evaluate(LFT3(F), r) : r in ht | Evaluate(Denominator(LFT3(F)), r) ne 0  ])); //I_3 torsion reattempt2
elif n eq 4 then
return Setseq(Set([ Evaluate(LFT4(F), r) : r in ht | Evaluate(Denominator(LFT4(F)), r) ne 0  ])); //I_3 torsion reattempt2
elif n eq 5 then
return Setseq(Set([ Evaluate(LFT5(F), r) : r in ht | Evaluate(Denominator(LFT5(F)), r) ne 0  ])); //I_3 torsion reattempt2
elif n eq 6 then
return Setseq(Set([ Evaluate(LFT6(F), r) : r in ht | Evaluate(Denominator(LFT6(F)), r) ne 0  ])); //I_3 torsion reattempt2
end if;
end function;

js_Q:=function(n,F,m)
return [ a : a in js_init(n,F,m) | not(a in [-16/27, 0, 81/64]) and Discriminant(QuaternionAlgebra< Rationals() | -6*a, -2*(27*a+16) >) eq 1  ];
end function;

/////////////////////




/////////////////////


jsQlist:=js_Q(5,(1/4)*(-1/(d^2*y^4-d*y^2)),20000);
d; #jsQlist;

Iptors:=[];
for j in jsQlist do    //Apply LFTn to F up to heightbound m st definable over Q

    // The Igusa invariants from Baba-Granath for D=6
    J2:=12*(j+1);
    J4:=6*(j^2+j+1);
    J6:=4*(j^3-2*j^2+1);
    J8:=(J2*J6-J4^2)/4;
    J10:=j^3;
    BGIgusa:=[J2,J4,J6,J8,J10];


     //The Igusa-Clebsch invariants are
    I2:=8*J2;
    I4:=-96*J4+4*J2^2;
    I6:=-(576*J6-8*J2^3+160*J2*J4);
    I10:=4096*J10;
    BGIC:=[I2,I4,I6,I10];

    //C:=IntegralModel(HyperellipticCurveFromIgusaClebsch(BGIC));
    //f:=HyperellipticPolynomials(C);
    //J:=Jacobian(C);
    //GroupName(TorsionSubgroup(J));




    //if GCD( tors_gcd ) ne 1 then
        Append(~Iptors, <j, GCD( tors_gcd )>);
        <j, GCD( tors_gcd )>;
    //end if;
    //Iptors;
 end for;

//////////////////




     //FO:=AbsoluteField(M);
     //tors2_field:=AbsoluteField(SplittingField(f));
     //< Degree(FO), Degree(tors2_field) >;
     //[ Degree(tors2_field)/Degree(L[1]) : L in Subfields(FO) ];
     //Degree(RelativeField(absM,AbsoluteField(SplittingField(fM))));

     //T:=TorsionSubgroup(J);
     //GroupName(T);

     //M:=AbsoluteField(M);
      //OM:=Integers(M);
     //CM:=BaseChange(C,M);
     //Conductor(CM,Factorization(3*OM)[1,1]);





//C:=MinimalWeierstrassModel(C);
//M:=AbsoluteField(M);
 //OM:=Integers(M);
//CM:=BaseChange(C,M);
 //rho3:=GaloisRepresentation(C,3);
 //rho3M:=GaloisRepresentation(CM,Factorization(3*OM)[1,1]);
